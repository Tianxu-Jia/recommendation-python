{"url_to_unified_index": {"https://cicd.video/article/How_to_troubleshoot_common_issues_in_a_CICD_pipeline.html": 3, "https://stackoverflow.com/questions/46584324/codebuild-execution-continues-after-build-fails-instead-of-stopping": 18, "https://gradle.com/blog/determine-the-root-cause-of-github-actions-failures-faster-with-gradle-enterprise/": 7, "https://stackoverflow.com/questions/24582319/branching-and-merging-best-practices-in-git": 11, "https://link.springer.com/article/10.1007/s10515-021-00319-5": 8, "https://get.assembla.com/blog/merge-conflicts/": 19, "https://hivel.gitbook.io/knowlegebase/insights-and-best-practices/how-to-identify-root-cases-of-high-change-failure-rates": 5, "https://ieeexplore.ieee.org/document/7962398/": 4, "https://community.atlassian.com/t5/App-Central-articles/Advanced-Git-merge-conflict-resolution-techniques/ba-p/2476971": 1, "https://www.baeldung.com/ops/git-merge-conflicts-undo": 2, "https://about.gitlab.com/topics/ci-cd/": 12, "https://marmelab.com/blog/2017/04/13/toubleshooting-ci-fails.html": 6, "https://stackoverflow.com/questions/70809324/git-how-to-avoid-conflict-when-merging-feature-branch-to-dev-when-feature-bran": 15, "https://about.gitlab.com/topics/ci-cd/benefits-continuous-integration/": 13, "https://www.sciencedirect.com/science/article/pii/S0950584920301579": 16, "https://stackoverflow.com/questions/102902/what-is-a-good-ci-build-process": 14, "https://blog.mergify.com/top-ci-cd-pipeline-monitoring-tools/": 17, "https://dev.to/haseebmirza/version-control-best-practices-with-git-and-github-364h": 24, "https://medium.com/getpieces/optimizing-team-collaboration-advanced-git-strategies-for-developers-d9a2618ae2e0": 25, "https://medium.com/@gaganjain9319/common-causes-of-build-failure-in-ci-cd-pipeline-and-how-to-debug-those-ee6fdb79caad": 26, "https://www.techtarget.com/searchsoftwarequality/tip/Identify-and-fix-broken-builds-with-CI-CD-pipelines": 21, "https://gitdeveloperguide.solomonmarvel.com/git-troubleshooting/dealing-with-repository-corruption-or-other-issues": 9, "https://stackoverflow.com/questions/101752/i-ran-into-a-merge-conflict-how-do-i-abort-the-merge": 10, "https://www.freecodecamp.org/news/keep-branches-up-to-date-resolve-merge-conflicts/": 20, "https://www.freecodecamp.org/news/how-to-use-git-best-practices-for-beginners/": 22, "https://www.datadoghq.com/blog/best-practices-for-ci-cd-monitoring/": 23, "https://www.slingacademy.com/article/merging-git-branches-a-practical-guide-with-examples/": 28, "https://www.split.io/blog/understanding-the-feature-branching-strategy-in-git/": 30, "https://about.gitlab.com/blog/2018/08/08/git-happens/": 32, "https://dealroom.net/blog/biggest-post-merger-integration-challenges": 27, "https://stackoverflow.com/questions/32195366/how-to-merge-features-branches-to-branch-develop-in-git": 29, "https://stackoverflow.com/questions/52486882/git-conflicts-between-feature-branches-how-to-avoid-a-feature-branch-contain": 31}, "url_to_info": {"https://cicd.video/article/How_to_troubleshoot_common_issues_in_a_CICD_pipeline.html": {"url": "https://cicd.video/article/How_to_troubleshoot_common_issues_in_a_CICD_pipeline.html", "description": "How to troubleshoot common issues in a CI/CD pipeline - cicd.video", "snippets": ["When a build fails, it can interrupt the pipeline and delay the delivery process. The cause of build failures can vary, from syntax errors to missing dependencies, incorrect environment configurations, and many more. Another common issue in CI/CD pipelines is test failures."], "title": "How to troubleshoot common issues in a CI/CD pipeline - cicd.video", "meta": {"query": "methodologies for troubleshooting CI/CD build failures"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/46584324/codebuild-execution-continues-after-build-fails-instead-of-stopping": {"url": "https://stackoverflow.com/questions/46584324/codebuild-execution-continues-after-build-fails-instead-of-stopping", "description": "CodeBuild execution continues after build fails instead of stopping", "snippets": ["The post_build section is run even if the build section might fail. Expanding on the previous answers, you can use the variable CODEBUILD_BUILD_SUCCEEDING in the post_build section of the buildspec.yml file. You can make the post_build section to run if and only if the build section completed successfully. Below is an example of how this can be achieved:"], "title": "CodeBuild execution continues after build fails instead of stopping", "meta": {"query": "how do failed builds affect development process in Git"}, "citation_uuid": -1}, "https://gradle.com/blog/determine-the-root-cause-of-github-actions-failures-faster-with-gradle-enterprise/": {"url": "https://gradle.com/blog/determine-the-root-cause-of-github-actions-failures-faster-with-gradle-enterprise/", "description": "Determine the Root Cause of GitHub Actions Failures Faster with ...", "snippets": ["Those Build Scans provide the rich context, insights, and failure history needed to identify the root cause of a failure in just a few clicks. The integration makes it possible to directly view a list of all Gradle build failures in a GitHub Actions workflow, and navigate to a Build Scan to learn more about a particular build failure from the ..."], "title": "Determine the Root Cause of GitHub Actions Failures Faster with ...", "meta": {"query": "how to identify root causes of build failures in Git"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/24582319/branching-and-merging-best-practices-in-git": {"url": "https://stackoverflow.com/questions/24582319/branching-and-merging-best-practices-in-git", "description": "Branching and merging best practices in Git - Stack Overflow", "snippets": ["Work on your feature. If it's accepted, merge it into the current release branch. If it's not accepted, go to step 4. After the release has been deployed to live and a critical bug is discovered, we branch a hotfix branch from master (e.g. hotfix/ ISSUE_NUMBER), merge it back into master and deploy again.", "We want to learn best practices regarding workflow with branching and merging. We are using a lightweight version of Git Flow. We have a dev, staging and a master branch which are all linear with each other. staging is branched from master. dev is branched from staging. On top of that we use feature and hotfix branches to work on new features ..."], "title": "Branching and merging best practices in Git - Stack Overflow", "meta": {"query": "best practices for merging feature branches in Git"}, "citation_uuid": -1}, "https://link.springer.com/article/10.1007/s10515-021-00319-5": {"url": "https://link.springer.com/article/10.1007/s10515-021-00319-5", "description": "Improving the prediction of continuous integration build failures using ...", "snippets": ["Continuous Integration (CI) aims at supporting developers in integrating code changes constantly and quickly through an automated build process. However, the build process is typically time and resource-consuming as running failed builds can take hours until discovering the breakage; which may cause disruptions in the development process and delays in the product release dates. Hence ..."], "title": "Improving the prediction of continuous integration build failures using ...", "meta": {"query": "continuous integration benefits diagnosing build failures"}, "citation_uuid": -1}, "https://get.assembla.com/blog/merge-conflicts/": {"url": "https://get.assembla.com/blog/merge-conflicts/", "description": "Troubleshooting Merge Conflicts: Common Scenarios and How to ... - Assembla", "snippets": ["For example, feature branches can be used to isolate work in progress. But it's useful to understand how many feature branches the team has and how they will come together as they're merged back into the master branch. Where possible, you might stagger people to work on shared code or check in their changes in a certain order to reduce ..."], "title": "Troubleshooting Merge Conflicts: Common Scenarios and How to ... - Assembla", "meta": {"query": "common reasons for unsuccessful builds after merging feature branches"}, "citation_uuid": -1}, "https://hivel.gitbook.io/knowlegebase/insights-and-best-practices/how-to-identify-root-cases-of-high-change-failure-rates": {"url": "https://hivel.gitbook.io/knowlegebase/insights-and-best-practices/how-to-identify-root-cases-of-high-change-failure-rates", "description": "How to identify root cases of high change failure rates?", "snippets": ["Identifying root causes of high change failure rates is crucial for improving the stability and reliability of software deployments. Here are effective strategies for determining the underlying issues that contribute to a high rate of change failures:"], "title": "How to identify root cases of high change failure rates?", "meta": {"query": "how to identify root causes of build failures in Git"}, "citation_uuid": -1}, "https://ieeexplore.ieee.org/document/7962398/": {"url": "https://ieeexplore.ieee.org/document/7962398/", "description": "Insights into Continuous Integration Build Failures", "snippets": ["Continuous integration is prevalently used in modern software engineering to build software systems automatically. Broken builds hinder developers' work and delay project progress. We must identify the factors causing build failures. This paper presents a large empirical study to identify the factors such as, complexity of a task, build strategy and contribution models (i.e., push and pull ..."], "title": "Insights into Continuous Integration Build Failures", "meta": {"query": "continuous integration benefits diagnosing build failures"}, "citation_uuid": -1}, "https://community.atlassian.com/t5/App-Central-articles/Advanced-Git-merge-conflict-resolution-techniques/ba-p/2476971": {"url": "https://community.atlassian.com/t5/App-Central-articles/Advanced-Git-merge-conflict-resolution-techniques/ba-p/2476971", "description": "Advanced Git merge conflict resolution techniques", "snippets": ["However, in general, you can configure the merge tool by setting properties such as merge.tool, mergetool.<tool>.path, and mergetool.<tool>.cmd in your Git configuration. Performing interactive conflict resolution step by step. Once you have set up and configured an interactive merge tool, you can initiate the interactive conflict resolution ..."], "title": "Advanced Git merge conflict resolution techniques", "meta": {"query": "tools for managing build failures after merging branches in Git"}, "citation_uuid": -1}, "https://www.baeldung.com/ops/git-merge-conflicts-undo": {"url": "https://www.baeldung.com/ops/git-merge-conflicts-undo", "description": "Git Merging: Conflict Resolution and Undoing a merge", "snippets": ["Now, we can use the merge subcommand: $ git merge feature1. Auto-merging file. CONFLICT (content): Merge conflict in file. Automatic merge failed; fix conflicts and then commit the result. Copy. In this case, we attempt to merge the local feature1 branch into the local primary master.", "Now, we can use the merge subcommand: $ git merge feature1 Auto-merging file CONFLICT (content): Merge conflict in file Automatic merge failed; fix conflicts and then commit the result. In this case, we attempt to merge the local feature1 branch into the local primary master. If we don't supply an argument, Git tries to synchronize the ..."], "title": "Git Merging: Conflict Resolution and Undoing a merge", "meta": {"query": "build failure causes after merging in Git"}, "citation_uuid": -1}, "https://about.gitlab.com/topics/ci-cd/": {"url": "https://about.gitlab.com/topics/ci-cd/", "description": "What is CI/CD? - GitLab", "snippets": ["Continuous integration is the practice of integrating all your code changes into the main branch of a shared source code repository early and often, automatically testing each change when you commit or merge them, and automatically kicking off a build. With continuous integration, errors and security issues can be identified and fixed more easily, and much earlier in the development process."], "title": "What is CI/CD? - GitLab", "meta": {"query": "how continuous integration helps with build failures in Git"}, "citation_uuid": -1}, "https://marmelab.com/blog/2017/04/13/toubleshooting-ci-fails.html": {"url": "https://marmelab.com/blog/2017/04/13/toubleshooting-ci-fails.html", "description": "Troubleshooting Continuous Integration, or How to Debug ... - Marmelab", "snippets": ["Let's be clear: it's rare. Most of the CI failures come from the test setup, or the application code. But to troubleshoot CI failures, at last resort, log in to the CI server (most of them offer an SSH endpoint), run the tests in debug mode, add breakpoints, add logs, and find the reason why it fails."], "title": "Troubleshooting Continuous Integration, or How to Debug ... - Marmelab", "meta": {"query": "how to handle failed builds in continuous integration"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/70809324/git-how-to-avoid-conflict-when-merging-feature-branch-to-dev-when-feature-bran": {"url": "https://stackoverflow.com/questions/70809324/git-how-to-avoid-conflict-when-merging-feature-branch-to-dev-when-feature-bran", "description": "Git - how to avoid conflict when merging feature branch to dev when ...", "snippets": ["This means keeping the scope of feature branches small. Rather than trying to tackle the whole branch, you can break it up into smaller feature branches. Identify changes which can be isolated and committed as their own branch. Use cherry-pick to move them to a new branch, remove them from your monster branch with git rebase -i, test and merge ..."], "title": "Git - how to avoid conflict when merging feature branch to dev when ...", "meta": {"query": "how to avoid build failures after merging feature branches Git"}, "citation_uuid": -1}, "https://about.gitlab.com/topics/ci-cd/benefits-continuous-integration/": {"url": "https://about.gitlab.com/topics/ci-cd/benefits-continuous-integration/", "description": "What is continuous integration (CI)? - GitLab", "snippets": ["Continuous integration (CI) explained. Continuous integration, or CI, is the practice of integrating all your code changes into the main branch of a shared source code repository early and often, automatically testing each change when you commit or merge them, and automatically kicking off a build. CI helps DevOps teams detect and resolve ..."], "title": "What is continuous integration (CI)? - GitLab", "meta": {"query": "how continuous integration helps with build failures in Git"}, "citation_uuid": -1}, "https://www.sciencedirect.com/science/article/pii/S0950584920301579": {"url": "https://www.sciencedirect.com/science/article/pii/S0950584920301579", "description": "Predicting continuous integration build failures using evolutionary ...", "snippets": ["Context: Continuous Integration (CI) is a common practice in modern software development and it is increasingly adopted in the open-source as well as the software industry markets. CI aims at supporting developers in integrating code changes constantly and quickly through an automated build process. However, in such context, the build process is typically time and resource-consuming which ..."], "title": "Predicting continuous integration build failures using evolutionary ...", "meta": {"query": "continuous integration benefits diagnosing build failures"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/102902/what-is-a-good-ci-build-process": {"url": "https://stackoverflow.com/questions/102902/what-is-a-good-ci-build-process", "description": "continuous integration - What is a good CI build-process ... - Stack ...", "snippets": ["2. A good CI process will have full or nearly-full unit test coverage. Unit tests test classes and methods, vs. integration tests, which test multiple parts of the system. When you set up your CI builds, have them automate the unit tests. That way, the CI builds can run multiple times per day."], "title": "continuous integration - What is a good CI build-process ... - Stack ...", "meta": {"query": "how to handle failed builds in continuous integration"}, "citation_uuid": -1}, "https://blog.mergify.com/top-ci-cd-pipeline-monitoring-tools/": {"url": "https://blog.mergify.com/top-ci-cd-pipeline-monitoring-tools/", "description": "Top CI/CD Pipeline Monitoring Tools and Features - Continuously Merging", "snippets": ["1\ufe0f\u20e3 Mergify CI Monitoring \ud83d\udc8e Why It's Great. CI Monitoring by Mergify is a best-in-class tool when it comes to monitoring your CI. Providing a global view of all your CI jobs, CI Monitoring can also diagnose, track, and pack CI failures. You can also use it to detect your flaky tests, retry them automatically or reflect on what actions ..."], "title": "Top CI/CD Pipeline Monitoring Tools and Features - Continuously Merging", "meta": {"query": "build monitoring tools for diagnosing CI build failures"}, "citation_uuid": -1}, "https://dev.to/haseebmirza/version-control-best-practices-with-git-and-github-364h": {"url": "https://dev.to/haseebmirza/version-control-best-practices-with-git-and-github-364h", "description": "Version Control Best Practices with Git and GitHub", "snippets": ["In this article, we'll explore best practices to help you master these essential tools. 1. Understanding Version Control: Version control systems (VCS) like Git track changes, allowing multiple developers to work on the same project without conflicts. GitHub enhances these capabilities with a user-friendly web interface and collaboration features."], "title": "Version Control Best Practices with Git and GitHub", "meta": {"query": "best practices for handling unsuccessful builds in Git"}, "citation_uuid": -1}, "https://medium.com/getpieces/optimizing-team-collaboration-advanced-git-strategies-for-developers-d9a2618ae2e0": {"url": "https://medium.com/getpieces/optimizing-team-collaboration-advanced-git-strategies-for-developers-d9a2618ae2e0", "description": "Optimizing Team Collaboration: Advanced Git Strategies for ... - Medium", "snippets": ["By mastering Git, you position yourself as an invaluable team member capable of navigating collaborative projects with ease. Git is a distributed version control system that enables multiple ..."], "title": "Optimizing Team Collaboration: Advanced Git Strategies for ... - Medium", "meta": {"query": "team collaboration issues due to unsuccessful builds in Git"}, "citation_uuid": -1}, "https://medium.com/@gaganjain9319/common-causes-of-build-failure-in-ci-cd-pipeline-and-how-to-debug-those-ee6fdb79caad": {"url": "https://medium.com/@gaganjain9319/common-causes-of-build-failure-in-ci-cd-pipeline-and-how-to-debug-those-ee6fdb79caad", "description": "Common Causes of build failure in CI/CD pipeline and how to ... - Medium", "snippets": ["Pipeline configuration errors: Incorrect or incomplete configuration files for the CI/CD pipeline can cause the build process to fail. Test failures: If there are issues with the automated tests ..."], "title": "Common Causes of build failure in CI/CD pipeline and how to ... - Medium", "meta": {"query": "how to handle failed builds in continuous integration"}, "citation_uuid": -1}, "https://www.techtarget.com/searchsoftwarequality/tip/Identify-and-fix-broken-builds-with-CI-CD-pipelines": {"url": "https://www.techtarget.com/searchsoftwarequality/tip/Identify-and-fix-broken-builds-with-CI-CD-pipelines", "description": "Identify and fix broken builds with CI/CD pipelines - TechTarget", "snippets": ["Are failed or broken builds creating CI/CD pipeline challenges? Developers can check credentials, fix flaky tests and implement alerts to address the issue."], "title": "Identify and fix broken builds with CI/CD pipelines - TechTarget", "meta": {"query": "methodologies for troubleshooting CI/CD build failures"}, "citation_uuid": -1}, "https://gitdeveloperguide.solomonmarvel.com/git-troubleshooting/dealing-with-repository-corruption-or-other-issues": {"url": "https://gitdeveloperguide.solomonmarvel.com/git-troubleshooting/dealing-with-repository-corruption-or-other-issues", "description": "Dealing with Repository Corruption or Other Issues", "snippets": ["Here are some steps to help you diagnose repository problems: Check the Git version: Ensure that you are using an up-to-date version of Git, as older versions may have known issues or bugs that could contribute to repository corruption. Verify repository integrity: Use the git fsck command to check the integrity of the repository's objects and ..."], "title": "Dealing with Repository Corruption or Other Issues", "meta": {"query": "best practices for documenting build failures in Git"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/101752/i-ran-into-a-merge-conflict-how-do-i-abort-the-merge": {"url": "https://stackoverflow.com/questions/101752/i-ran-into-a-merge-conflict-how-do-i-abort-the-merge", "description": "git - I ran into a merge conflict. How do I abort the merge? - Stack ...", "snippets": ["After a failed merge, when there is no MERGE_HEAD, the failed merge can be undone with git reset --merge, but not necessarily with git merge --abort. They are not only old and new syntax for the same thing. Personally, I find git reset --merge much more powerful for scenarios similar to the described one, and failed merges in general."], "title": "git - I ran into a merge conflict. How do I abort the merge? - Stack ...", "meta": {"query": "how to handle unsuccessful builds after merging in Git"}, "citation_uuid": -1}, "https://www.freecodecamp.org/news/keep-branches-up-to-date-resolve-merge-conflicts/": {"url": "https://www.freecodecamp.org/news/keep-branches-up-to-date-resolve-merge-conflicts/", "description": "How to Keep Branches Up-to-Date and Resolve Merge Conflicts in GitHub ...", "snippets": ["Step #1 - Click the \"Resolve conflicts\" Button. First, go to the upstream repository on GitHub. Then, click the \"Pull request\" tab. Find and open your pull request, and scroll down. Towards the end, you will find the \"Resolve conflicts\" button. A notification of \"This branch has conflicts that must be resolved\" and a \"Resolve conflicts\" button ..."], "title": "How to Keep Branches Up-to-Date and Resolve Merge Conflicts in GitHub ...", "meta": {"query": "tools for diagnosing build failures after merging Git branches"}, "citation_uuid": -1}, "https://www.freecodecamp.org/news/how-to-use-git-best-practices-for-beginners/": {"url": "https://www.freecodecamp.org/news/how-to-use-git-best-practices-for-beginners/", "description": "Git Best Practices - A Guide to Version Control for Beginners", "snippets": ["Step 4: Commit Changes. After adding files to the staging area, the next step is to commit the changes to your repository using the git commit command. When committing changes, it's important to provide a clear and descriptive message that explains what changes you made in the commit."], "title": "Git Best Practices - A Guide to Version Control for Beginners", "meta": {"query": "best practices for handling unsuccessful builds in Git"}, "citation_uuid": -1}, "https://www.datadoghq.com/blog/best-practices-for-ci-cd-monitoring/": {"url": "https://www.datadoghq.com/blog/best-practices-for-ci-cd-monitoring/", "description": "Best Practices for CI/CD Monitoring - Datadog", "snippets": ["Modern-day engineering teams rely on continuous integration and continuous delivery (CI/CD) providers, such as GitHub Actions, GitLab, and Jenkins to build automated pipelines and testing tools that enable them to commit and deploy application code faster and more frequently. However, improving the performance of CI/CD systems and troubleshooting failures can be challenging when teams within ..."], "title": "Best Practices for CI/CD Monitoring - Datadog", "meta": {"query": "build monitoring tools for diagnosing CI build failures"}, "citation_uuid": -1}, "https://www.slingacademy.com/article/merging-git-branches-a-practical-guide-with-examples/": {"url": "https://www.slingacademy.com/article/merging-git-branches-a-practical-guide-with-examples/", "description": "Merging Git branches: A practical guide with examples", "snippets": ["This moves the entire 'new-feature' branch to start at the tip of the 'main' branch, which can simplify the merge. Using Merge Tools. For complex conflicts, graphical merge tools like Meld, KDiff3 or the one integrated in your IDE can help. Configure a merge tool with: git config --global merge.tool yourTool. To initiate the external ..."], "title": "Merging Git branches: A practical guide with examples", "meta": {"query": "best practices for merging feature branches in Git"}, "citation_uuid": -1}, "https://www.split.io/blog/understanding-the-feature-branching-strategy-in-git/": {"url": "https://www.split.io/blog/understanding-the-feature-branching-strategy-in-git/", "description": "Understanding the Feature Branching Strategy in Git - Split", "snippets": ["Executing git merge [feature_branch_name] will integrate the feature branch into the target branch. This step might be followed by git push, ensuring the changes are reflected in the remote repo. Cleanup: After a successful merge, the feature branch often becomes redundant. It's a common practice to delete it, keeping the repo tidy."], "title": "Understanding the Feature Branching Strategy in Git - Split", "meta": {"query": "common reasons for unsuccessful builds after merging feature branches into main branch Git"}, "citation_uuid": -1}, "https://about.gitlab.com/blog/2018/08/08/git-happens/": {"url": "https://about.gitlab.com/blog/2018/08/08/git-happens/", "description": "Git happens! 6 Common Git mistakes and how to fix them - GitLab", "snippets": ["git reflog shows you a list of all the things you've done. It then allows you to use Git's magical time-traveling skills to go back to any point in the past. I should note, this is a last resort thing and should not be used lightly. To get this list, type: git reflog Every step we took, every move we made, Git was watching us."], "title": "Git happens! 6 Common Git mistakes and how to fix them - GitLab", "meta": {"query": "how do failed builds affect development process in Git"}, "citation_uuid": -1}, "https://dealroom.net/blog/biggest-post-merger-integration-challenges": {"url": "https://dealroom.net/blog/biggest-post-merger-integration-challenges", "description": "8 Post Merger M&A Integration Challenges & How to Overcome - DealRoom", "snippets": ["7. Customer Engagement. It's a mistake for companies to believe that their post merger challenges only concern what happens within the company and not outside. Stakeholders - particularly customers - have to be engaged as part of the process.They may even receive invoice templates with a new name at the top."], "title": "8 Post Merger M&A Integration Challenges & How to Overcome - DealRoom", "meta": {"query": "technologies to reduce build failures after merging branches"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/32195366/how-to-merge-features-branches-to-branch-develop-in-git": {"url": "https://stackoverflow.com/questions/32195366/how-to-merge-features-branches-to-branch-develop-in-git", "description": "How to merge features branches to branch develop in Git?", "snippets": ["If you are alone working on FeatureB branch, the a pull --rebase develop is the best practice: you are replaying FeatureB changes on top of FeatureA. (and git push --force after).. If you are multiple developers working on FeatureB, then a merge of develop to FeatureB has to be done, before merging FeatureB to develop.. In both cases, the idea is the same: test the integration of both features ..."], "title": "How to merge features branches to branch develop in Git?", "meta": {"query": "common reasons for unsuccessful builds after merging feature branches into main branch Git"}, "citation_uuid": -1}, "https://stackoverflow.com/questions/52486882/git-conflicts-between-feature-branches-how-to-avoid-a-feature-branch-contain": {"url": "https://stackoverflow.com/questions/52486882/git-conflicts-between-feature-branches-how-to-avoid-a-feature-branch-contain", "description": "branching and merging - Git - conflicts between feature branches - how ...", "snippets": ["If for some reason, you still need to push changes not ready for production to develop. When you face a conflict, you can create a temporary branch that solves the conflict between two branches and then, merge it to develop. ... your friend should have created a new branch since Feature_002 called Feature_001_002_temp and then merge the branch ..."], "title": "branching and merging - Git - conflicts between feature branches - how ...", "meta": {"query": "common reasons for unsuccessful builds after merging feature branches"}, "citation_uuid": -1}}}